# AMBER-FB15

This repository contains the following:

1) AMBER-FB15 protein force field parameters in Gromacs, OpenMM and
AMBER format, contained in "Params".

2a) 99sc-cnv.py, a Python script to convert the AMBER-FB15 protein
force field from the original Gromacs format that ForceBalance used
for parameterization (contained in Input) to an OpenMM XML file

2b) oxml-aprm.py, a Python script to convert an OpenMM XML file
containing the AMBER-FB15 protein force field parameters to AMBER
format

To perform the first conversion, run:

> python 99sc-cnv.py Input/a99sc-v2-r1.itp

This will create new.xml, the OpenMM force field XML file.

To perform the second conversion, run:

> python oxml-aprm.py Params/OpenMM/amber-fb15.xml

This will create the files to be copied to AMBER:

leaprc.fb15 -> $AMBERHOME/dat/leap/cmd
frcmod.fb15 -> $AMBERHOME/dat/leap/parm
all_aminofb15.lib -> $AMBERHOME/dat/leap/lib

Note that the solvent parameters also need to be updated, and
these files are provided in Params/AMBER.

3) A script for checking the correctness of the AMBER conversion
(compared to the original GROMACS format where the conversion was
done).  This should be run in a folder such as 06.DHFRSol:

> python ../gmx-amber-compare.py protein.pdb

You may pass a "--ff" flag to the script, which selects between 'fb15',
'fb15ni', and 'ildn'.  The 'fb15ni' doesn't have any improper torsions
for the sake of making a clean comparison, since they are implemented
differently in AMBER vs. GROMACS.  The 'ildn' is just there as a reference
to make sure the comparison passes for an existing force field.

In order for these tests to work, the GROMACS and AMBER parameters 
need to be installed. This can be done by copying the GROMACS parameter folders
over to (Gromacs root)/share/gromacs/top/, and the AMBER parameter folders
over to (AMBER root)/dat/leap/(cmd, lib, parm).

molecule.py and nifty.py are bits of ForceBalance that are used by the script.
Including them here removes the ForceBalance dependency.
